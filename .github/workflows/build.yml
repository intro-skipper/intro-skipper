name: "Build Plugin"

on:
  push:
    branches:
      - '*'  # Triggers on any branch push
    paths-ignore:
      - "**/README.md"
      - ".github/ISSUE_TEMPLATE/**"
      - "docs/**"
      - "images/**"
      - "manifest.json"

permissions:
  contents: write
  packages: write

jobs:
  build:
    if: ${{ ! startsWith(github.event.head_commit.message, 'v0.') }}

    runs-on: ubuntu-latest

    steps:
      - name: Sanitize head_ref
        run: |
          # Get the branch name and sanitize it
          SANITIZED_BRANCH_NAME=$(echo "${{ github.head_ref }}" | sed 's/[^a-zA-Z0-9.-]/_/g')

          # Export it as an environment variable
          echo "SANITIZED_BRANCH_NAME=$SANITIZED_BRANCH_NAME" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Read version from VERSION.txt
        id: read-version
        run: |
          MAIN_VERSION=$(cat VERSION.txt)
          echo "MAIN_VERSION=${MAIN_VERSION}"
          echo "MAIN_VERSION=$MAIN_VERSION" >> $GITHUB_ENV

      - name: Check for BETA file
        id: check-beta
        run: |
          if [ -f "BETA" ]; then
            echo "IS_BETA=true" >> $GITHUB_ENV
          else
            echo "IS_BETA=false" >> $GITHUB_ENV
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Minify HTML
        run: |
          npx html-minifier-terser --collapse-boolean-attributes --collapse-whitespace --remove-comments --remove-optional-tags --remove-redundant-attributes --remove-script-type-attributes --remove-tag-whitespace --use-short-doctype --minify-css true --minify-js true -o IntroSkipper/Configuration/configPage.html IntroSkipper/Configuration/configPage.html
          npx terser IntroSkipper/Configuration/inject.js -o IntroSkipper/Configuration/inject.js -c -m
          npx terser IntroSkipper/Configuration/visualizer.js -o IntroSkipper/Configuration/visualizer.js -c -m

      - name: Restore Beta dependencies
        if: ${{env.IS_BETA == 'true' }}
        run: |
          dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name jellyfin-pre "https://nuget.pkg.github.com/jellyfin/index.json"
          dotnet tool install --global dotnet-outdated-tool
          dotnet outdated -pre Always -u -inc Jellyfin

      - name: Restore dependencies
        if: ${{env.IS_BETA == 'false' }}
        run: dotnet restore

      - name: Embed version info
        run: |
          GITHUB_SHA=${{ github.sha }}
          sed -i "s/string\.Empty/\"$GITHUB_SHA\"/g" IntroSkipper/Helper/Commit.cs

      - name: Retrieve commit identification
        run: |
          GIT_HASH=$(git rev-parse --short HEAD)
          echo "GIT_HASH=${GIT_HASH}" >> $GITHUB_ENV

      - name: Build
        run: dotnet build --no-restore

      - name: Upload artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: IntroSkipper-${{ env.GIT_HASH }}.dll
          path: IntroSkipper/bin/Debug/net8.0/IntroSkipper.dll
          if-no-files-found: error

      - name: Create archive
        if: startsWith(github.ref_name, '10.') # only do a preview release on 10.x branches
        run: zip -j "intro-skipper-${{ env.GIT_HASH }}.zip" IntroSkipper/bin/Debug/net8.0/IntroSkipper.dll

      - name: Create/replace the preview release and upload artifacts
        if: startsWith(github.ref_name, '10.') # only do a preview release on 10.x branches
        run: |
          gh release delete "${{ env.MAIN_VERSION }}/preview" --cleanup-tag --yes || true
          gh release create "${{ env.MAIN_VERSION }}/preview" "intro-skipper-${{ env.GIT_HASH }}.zip" --prerelease --title "intro-skipper-${{ env.GIT_HASH }}" --notes "This is a prerelease version."  --target ${{ env.MAIN_VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
